#関数の基本
#printとreturnの違いについて

#--------------------------------------------------
#関数を使わない場合
#--------------------------------------------------

print("---関数を使わないで計算---")
今日のお菓子の代金 = 120
今日のジュースの代金 = 80
合計金額_直接計算 = 今日のお菓子の代金 + 今日のジュースの代金
print(f"今日使った合計金額は:{合計金額_直接計算}です")
print(f"この合計金額を使って計算はできるか？→{合計金額_直接計算 * 2}円") #計算はできる

#--------------------------------------------------
#関数を使って計算(printバージョン)
#--------------------------------------------------

#この関数は計算結果を「画面に表示する」だけ
def calculate_and_print_total(item1_price,item2_price):
    print("\n---printバージョン:関数の中で画面に「直接表示」---")
    合計 = item1_price + item2_price
    print(f"今日使った合計金額は:{合計}円です") #ここで「画面に表示」する(ただし、「return」がないのでこの関数は何も返さない)

print("\n---printバージョンの関数を呼び出す---")
#calculate_and_print_totalの関数を呼び出す
使った金額_print版 = calculate_and_print_total(150,70)

print(f"関数から返ってきた値(使った金額_print版)は:{使った金額_print版}です") #この関数は何も返さないので、使った金額という箱には「None」が入ってしまう
#print(f"この合計金額を使って計算はできるか？→{使った金額_print版 * 2}円") #★エラー発生！(Noneは数値ではないので掛け算できない)

#--------------------------------------------------
#関数を使って計算(returnバージョン)
#--------------------------------------------------

#この関数は計算結果を「返す」だけ
def calculate_and_return_total(item1_price,item2_price):
    print("\n---returnバージョン:関数の中で計算結果を「返す」---")
    合計 = item1_price + item2_price
    return 合計 #ここで計算結果を「返す」(「print」ではなく「return」を使うことで関数の外に「合計」という値を渡すことができる)

print("\n---returnバージョンの関数を呼び出す---")
#calculate_and_return_totalの関数を呼び出す
使った金額_return版 = calculate_and_return_total(190,100)

print(f"関数から返ってきた値(使った金額_return版)は:{使った金額_return版}です")
print(f"この合計金額を使って計算はできるか？→{使った金額_return版 * 2}円") #計算できる！
