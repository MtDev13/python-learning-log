#3つ以上のセットの集合演算

料理Aの材料 = {"豚肉","玉ねぎ","にんじん","じゃがいも","りんご","はちみつ"}
料理Bの材料 = {"鶏肉","玉ねぎ","にんじん","じゃがいも","マッシュルーム","ブロッコリー"}
料理Cの材料 = {"牛肉","玉ねぎ","マッシュルーム","トマト","パセリ"}


print(f"料理A(カレー)の材料:{料理Aの材料}")
print(f"料理B(シチュー)の材料:{料理Bの材料}")
print(f"料理C(ハヤシライス)の材料:{料理Cの材料}")

#--------------------------------------------------
#1.和集合(Union)-すべての要素
#--------------------------------------------------

#.union()メソッドを使う方法
すべての材料_メソッド版 = 料理Aの材料.union(料理Bの材料).union(料理Cの材料)
print(f"1.和集合(メソッド版):{すべての材料_メソッド版}")

#演算子を使う方法(パイプ記号「|」)
すべての材料_演算子版 = 料理Aの材料 | 料理Bの材料 | 料理Cの材料
print(f"1.和集合(演算子版):{すべての材料_演算子版}")

#--------------------------------------------------
#2.積集合(Intersection)-共通の要素
#--------------------------------------------------

#.intersection()メソッドを使う方法
共通の材料_メソッド版 = 料理Aの材料.intersection(料理Bの材料).intersection(料理Cの材料)
print(f"2.積集合(メソッド版):{共通の材料_メソッド版}")


#演算子を使う方法(アンパサンド「&」)
共通の材料_演算子版 = 料理Aの材料 & 料理Bの材料 & 料理Cの材料
print(f"2.積集合(演算子版):{共通の材料_演算子版}")


#--------------------------------------------------
#3.差集合(Difference)-特定のセットだけにある要素(A-B-C)
#--------------------------------------------------


#.difference()メソッドを使う方法
Aにだけある材料_メソッド版 = 料理Aの材料.difference(料理Bの材料).difference(料理Cの材料)
print(f"3.差集合(A-B-Cメソッド版):{Aにだけある材料_メソッド版}")

#演算子を使う方法(マイナス記号「-」)
Aにだけある材料_演算子版 = 料理Aの材料 - 料理Bの材料 - 料理Cの材料
print(f"3.差集合(A-B-C演算子版):{Aにだけある材料_演算子版}")

#--------------------------------------------------
#4.対称差(Symmetric Difference)-特定のセットだけにある要素(★すべての要素のうち、出現回数が奇数になる要素)
#--------------------------------------------------

#.symmetric_difference()メソッドを使う方法
奇数の要素_メソッド版 = 料理Aの材料.symmetric_difference(料理Bの材料).symmetric_difference(料理Cの材料)
print(f"4.対称差(メソッド版):{奇数の要素_メソッド版}") #★「玉ねぎ」は3回(奇数)出てくるので対称差に含まれる


#演算子を使う場合(ハット記号「^」)
奇数の要素_演算子版 = 料理Aの材料 ^ 料理Bの材料 ^ 料理Cの材料
print(f"4.対称差(演算子版):{奇数の要素_演算子版}") #★演算子版の対称差にも「玉ねぎ」
